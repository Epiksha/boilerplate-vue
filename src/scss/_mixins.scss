// Add direction modifiers
@mixin directioner($label, $property, $value, $increments: false, $negatives: true, $breakpoints: false, $dives: false, $states: false) {
    $directions: top, right, bottom, left;

    @each $direction in $directions {
        $newLabel: #{$label + firstChar($direction)};
        $newProp: #{$property}-#{$direction};

        .#{$newLabel} {
            #{$newProp}: $value;
        }
        
        @if $negatives {
            .-#{$newLabel} {
                #{$newProp}: -$value;
            }
        }

        @if $increments != false {
            @include incrementer($increments, $negatives, $newLabel, $newProp, $value, $breakpoints, $dives, $states);
        }
        
        @if $states != false {
            @include stater($states, $newLabel, $newProp, $value);

            @if $negatives {
                @include stater($states, -#{$newLabel}, $newProp, -#{$value});
            }
        }

        @if $breakpoints != false {
            @include breakpointer($newLabel, $newProp, $value, $dives, $states);

            @if $negatives {
                @include breakpointer(-$newLabel, $newProp, -$value, $dives, $states);
            }
        }
        
        @if $dives != false {
            @include diver($newLabel, $newProp, $value);

            @if $negatives {
                @include diver(-#{$newLabel}, $newProp, -$value);
            }
        }
    }
}

// Add multiplication modifiers in increments
@mixin incrementer($increments, $negatives, $label, $property, $value, $breakpoints: false, $dives: false, $states: false) {
    // -0 modifier
    $zeroLabel: #{$label}-0;

    .#{$zeroLabel} {
        #{$property}: 0;
    }

    @if $breakpoints != false {
        @include breakpointer($zeroLabel, $property, 0, $dives, $states);
    }
    
    @if $states != false {
        @include stater($states, $zeroLabel, $property, 0);
    }

    @if $dives != false {
        @include diver($zeroLabel, $property, 0);
    }

    // Increment Types
    @if type-of($increments) == map {
        $factor: false;
        $max: false;
        $min: false;

        @each $incrementProperty, $incrementValue in $increments {
            @if $incrementProperty == factor {
                $factor: $incrementValue;
            } @else if $incrementProperty == max {
                $max: $incrementValue;
            } @else if $incrementProperty == min {
                $min: $incrementValue;
            }
        }

        $iterableFactor: $min;

        @while $iterableFactor <= $max {
            $newVal: $value * $iterableFactor;
            $newLabel: '';

            @if $iterableFactor != 1 and $iterableFactor != 0 and $iterableFactor != -1 {

                @if $negatives and $iterableFactor < 0 {
                    @if isDecimal($iterableFactor) {
                        $newLabel: -#{$label}-#{secondChar($iterableFactor)}\.#{sliceEnd($iterableFactor, 4)};
                    } @else {
                        $newLabel: -#{$label + $iterableFactor};
                    }
                } @else if $iterableFactor > 0 {
                    @if isDecimal($iterableFactor) {
                        $newLabel: #{$label}-#{firstChar($iterableFactor)}\.#{sliceEnd($iterableFactor, 3)};
                    } @else {
                        $newLabel: #{$label}-#{$iterableFactor};
                    }
                }
    
                .#{$newLabel} {
                    #{$property}: $newVal;
                }

                @if $states != false {
                    @include stater($states, $newLabel, $property, $value);
                }
    
                @if $breakpoints != false {
                    @include breakpointer($newLabel, $property, $newVal, $dives, $states);
                }
    
                @if $dives != false {
                    @include diver($newLabel, $property, $newVal);
                }
            }

            $iterableFactor: $iterableFactor + $factor;
        }
    } @else if type-of($increments) == list {
        @each $increment in $increments {
            $newLabel: '';
            $newVal: $value * $increment;

            @if $increment != 1 and $increment != 0 and $increment != -1 {
                @if $increment < 0 {
                    @if isDecimal($increment) {
                        $newLabel: -#{$label}-#{secondChar($increment)}\.#{sliceEnd($increment, 4)};
                    } @else {
                        $newLabel: -#{$label + $increment};
                    }
                } @else {
                    @if isDecimal($increment) {
                        $newLabel: #{$label}-#{firstChar($increment)}\.#{sliceEnd($increment, 3)};
                    } @else {
                        $newLabel: #{$label}-#{$increment};
                    }
                }
            }

            .#{$newLabel} {
                #{$property}: $newVal;
            }

            @if $states != false {
                @include stater($states, $newLabel, $property, $newVal);
            }

            @if $breakpoints == true {
                @include breakpointer($newLabel, $property, $newVal, $dives, $states);
            }

            @if $dives == true {
                @include diver($newLabel, $property, $newVal);
            }
        }
    } @else if $increments == true {
        $iterator: '';

        @if $negatives == true {
            $iterator: -6;
        } @else {
            $iterator: 0.5;
        }

        @while $iterator <= 6 {
            $newLabel: $label;

            @if $negatives and $iterator < 0 and $iterator != -1 {
                @if isDecimal($iterator) {
                    $newLabel: -#{$label}-#{secondChar($iterator)}\.5;
                } @else {
                    $newLabel: -#{$label + $iterator};
                }
            } @else if $iterator > 0 and $iterator != 1 {
                @if isDecimal($iterator) {
                    $newLabel: #{$label}-#{firstChar($iterator)}\.5;
                } @else {
                    $newLabel: #{$label}-#{$iterator};
                }
            }

            @if $iterator != 0 and $iterator != -1 and $iterator != 1 {
                .#{$newLabel} {
                    #{$property}: $value * $iterator;
                }
    
                @if $breakpoints == true {
                    @include breakpointer($newLabel, $property, $value * $iterator, $dives, $states);
                }
                
                @if $dives == true {
                    @include diver($newLabel, $property, $value * $iterator);
                }
            }

            $iterator: $iterator + 0.5;
        }
    }
}

// Generate state classes
@mixin stater($states, $label, $property, $value) {
    @each $state in $states {
        .#{$state}\:#{$label}:#{$state} {
            #{$property}: $value;
        }
    }
}

// Create breakpoints
@mixin breakpointer($label, $property, $value, $dives: false, $states: false) {
    $breakpoints: (
        sm: 575px,
        md: 767px,
        lg: 1023px
    ) !default;

    $breakpointParadigm: max-width !default;

    @if variable-exists(extraBreakpoints) {
        $breakpoints: join($breakpoints, $extraBreakpoints);
    }

    @each $breakpointLabel, $breakpointValue in $breakpoints {
        $newLabel: #{$breakpointLabel}\:#{$label};

        .#{$newLabel} {
            @media (#{$breakpointParadigm}: $breakpointValue) {
                #{$property}: $value;
            }
        }

        @if $dives == true {
            .#{$newLabel}-dive > * {
                @media (#{$breakpointParadigm}: $breakpointValue) {
                    #{$property}: $value;
                }
            }
        }

        @if $states != false {
            @each $state in $states {
                @media (#{$breakpointParadigm}: $breakpointValue) {
                    .#{$breakpointLabel}\:#{$state}\:#{$label}:#{$state} {
                        #{$property}: $value;
                    }
                }
            }
        }
    }
}

// Add class styling to children
@mixin diver($label, $property, $value) {
    .#{$label}-dive > * {
        #{$property}: $value;
    }
}

// Builds out utilities
@if variable-exists(utilities) {
    @each $label, $utilityObject in $utilities {
        @each $property, $value in $utilityObject {
            // Set Config
            $directions: false;
            $breakpoints: false;
            $increments: false;
            $negatives: true;
            $states: false;
            $dives: false;

            @each $configLabel, $configObject in $utilityConfig {
                @if $configLabel == $label {
                    @each $configProperty, $configValue in $configObject { 
                        @if $configProperty == directions {
                            $directions: $configValue;
                        } @else if $configProperty == breakpoints {
                            $breakpoints: $configValue;
                        } @else if $configProperty == increments {
                            $increments: $configValue;
                        } @else if $configProperty == negatives {
                            $negatives: $configValue;
                        } @else if $configProperty == states {
                            $states: $configValue;
                        } @else if $configProperty == dives {
                            $dives: $configValue;
                        }
                    }
                }
            }

            .#{$label} {
                #{$property}: $value;
            }

            @if $negatives {
                .-#{$label} {
                    #{$property}: -#{$value};
                }
            }
    
            @if $directions != false {
                @include directioner($label, $property, $value, $increments, $negatives, $breakpoints, $dives, $states);
            }
    
            @if $increments != false {
                @include incrementer($increments, $negatives, $label, $property, $value, $breakpoints, $dives, $states);
            }
            
            @if $states != false {
                @include stater($states, $label, $property, $value);

                @if $negatives {
                    @include stater($states, -$label, $property, -$value);
                }
            }
            
            @if $breakpoints != false {
                @include breakpointer($label, $property, $value, $dives, $states);
            }
            
            @if $dives != false {
                @include diver($label, $property, $value);
            }
        }
    }
}